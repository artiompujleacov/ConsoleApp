/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TemaTest;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import java.io.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

public class AppTest
{
    @Test
    public void testDummy()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));
        // action
        App.main(null);
        // assertion
        assertEquals("Hello world!", bos.toString().trim());
        // undo the binding in System
        System.setOut(originalOut);
    }

    @Test
    public void testCreateUserUserAlreadyExists()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'uchii_cu_cel'", "-p 'unghii2023'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'uchii_cu_cel'", "-p 'unghii2023'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'User already exists'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testCreateUserNoUsername()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Please provide username'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testCreateUserNoPassword()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'uchii_cu_cel'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Please provide password'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testCreateUserUserCreatedSuccesfully()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'uchii_cu_cel'", "-p 'unghii2023'"});

        // assertion
        assertEquals("{ 'status' : 'ok', 'message' : 'User created successfully'}".replace("' ", "'").replace(" '", "'"),
                bos.toString().trim().replace("' ", "'").replace(" '", "'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    //endregion

    //region 2 Creare Postare

    @Test
    public void testCreatePostNoUsername()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-post"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testCreatePostNoPassword()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-post", "-u 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testCreatePostUserNameDoesNotExist()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-post", "-u 'test'", "-p 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testCreatePostLoginCredentialsAreWrong()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-post", "-u 'test'", "-p 'test2'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testCreatePostWithNoText()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-post", "-u 'test'", "-p 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'No text provided'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testCreatePostWithOver300Characters()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-post", "-u 'test'", "-p 'test'", "-text 'A sosit toamna. Un anotimp frumos, cu multe recolte si multe bucurii. Frunzele ruginii au acoperit asfaltul incalzit de usoarele raze de soare, pe jos parca este un covor tesut din aur si bronz. Totul in jur este incredibil ! Insa, totodata natura cedeaza, pleaca pasarile, unele animalele hiberneaza, crengile pomiilor raman fara frunze. Dansul frunzelor ruginii este un peisaj mirific. Parca ai fi intr-o poveste de vis, din care nu ai mai vrea sa iesi. '"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Post text length exceeded'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testCreatePostSuccessfully()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-post", "-u 'test'", "-p 'test'", "-text 'Astazi ma simt bine'"});

        // assertion
        assertEquals("{ 'status' : 'ok', 'message' : 'Post added successfully'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }


    //endregion
    //region 3 Stergere postare

    @Test
    public void testDeletePostNoUsername()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-delete-post-by-id"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testDeletePostNoPassword()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-delete-post-by-id", "-u 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testDeletePostUsernameDoesNotExists()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-delete-post-by-id", "-u 'test'", "-p 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testDeletePostLoginCredentialsAreWrong()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-delete-post-by-id", "-u 'test'", "-p 'test2'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testDeletePostNotValid()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-delete-post-by-id", "-u 'test'", "-p 'test'", "-id '1'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'The identifier was not valid'}".replace("' ", "'").replace(" '", "'"),
                bos.toString().trim().replace("' ", "'").replace(" '", "'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testDeletePostSuccessfully()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-post", "-u 'test'", "-p 'test'", "-text 'Astazi ma simt bine'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));


        App.main(new String[]{"-delete-post-by-id", "-u 'test'", "-p 'test'", "-id '1'"});

        // assertion
        assertEquals("{ 'status' : 'ok', 'message' : 'Post deleted successfully'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    //endregion

    //region 4 Follow utilizator

    @Test
    public void testFollowNoUsername()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-follow-user-by-username"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testFollowNoPassword()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-follow-user-by-username", "-u 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testFollowUserDoesNotExists()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-follow-user-by-username", "-u 'test'", "-p 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testFollowWrongCredentials()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-follow-user-by-username", "-u 'test'", "-p 'test2'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testFollowNotFound()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-follow-user-by-username", "-u 'test'", "-p 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'No username to follow was provided'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }


    @Test
    public void testFollowIdWrong()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-follow-user-by-username", "-u 'test'", "-p 'test'", "-username 'test2'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'The username to follow was not valid'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testFollowAlreadyFollowing()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test2'", "-p 'test2'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-follow-user-by-username", "-u 'test'", "-p 'test'", "-username 'test2'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-follow-user-by-username", "-u 'test'", "-p 'test'", "-username 'test2'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'The username to follow was not valid'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testFollowSuccessfully()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test2'", "-p 'test2'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-follow-user-by-username", "-u 'test'", "-p 'test'", "-username 'test2'"});

        // assertion
        assertEquals("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }


    //endregion

    //region 5 Unfollow utilizator
    @Test
    public void testUnfollowNoUsername()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-unfollow-user-by-username"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testUnfollowNoPassword()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-unfollow-user-by-username", "-u 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testUnfollowUsernameDoesNotExists()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-unfollow-user-by-username", "-u 'test'", "-p 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testUnfollowLoginCredentialsAreWrong()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-unfollow-user-by-username", "-u 'test'", "-p 'test2'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testUnfollowNotFound()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-unfollow-user-by-username", "-u 'test'", "-p 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'No username to unfollow was provided'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }


    @Test
    public void testUnfollowIdWrong()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-unfollow-user-by-username", "-u 'test'", "-p 'test'", "-username 'test2'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'The username to unfollow was not valid'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testUnfollowAlreadyFollowing()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test2'", "-p 'test2'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-unfollow-user-by-username", "-u 'test'", "-p 'test'", "-username 'test2'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'The username to unfollow was not valid'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testUnfollowSuccessfully()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test2'", "-p 'test2'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-follow-user-by-username", "-u 'test'", "-p 'test'", "-username 'test2'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-unfollow-user-by-username", "-u 'test'", "-p 'test'", "-username 'test2'"});

        // assertion
        assertEquals("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }


    //endregion
    //region 6 Like unei postari

    @Test
    public void testLikePostNoUsername()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-like-post"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testLikePostNoPassword()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-like-post", "-u 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testLikePostUsernameDoesNotExists()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-like-post", "-u 'test'", "-p 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testLikePostLoginCredentialsAreWrong()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-like-post", "-u 'test'", "-p 'test2'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testLikePostNotFound()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-like-post", "-u 'test'", "-p 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'No post identifier to like was provided'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testLikePostIdWrong()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-like-post", "-u 'test'", "-p 'test'", "-post-id '1'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'The post identifier to like was not valid'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testLikePostAlreadyLiked()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test2'", "-p 'test2'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-post", "-u 'test2'", "-p 'test2'", "-text 'Afara este frumos'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-like-post", "-u 'test'", "-p 'test'", "-post-id '1'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-like-post", "-u 'test'", "-p 'test'", "-post-id '1'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'The post identifier to like was not valid'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testLikePostSuccessfully()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test2'", "-p 'test2'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-post", "-u 'test'", "-p 'test'","-text 'Imi beau cafeaua'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-like-post", "-u 'test2'", "-p 'test2'", "-post-id '1'"});

        // assertion
        assertEquals("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }


    //endregion
    //regoin 7 Unike unei postari

    @Test
    public void testUnlikePostNoUsername()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-unlike-post"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testUnlikePostNoPassword()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-unlike-post", "-u 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testUnlikePostUsernameDoesNotExists()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-unlike-post", "-u 'test'", "-p 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testUnlikePostLoginCredentialsAreWrong()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-unlike-post", "-u 'test'", "-p 'test2'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testUnlikePostNotFound()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-unlike-post", "-u 'test'", "-p 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'No post identifier to unlike was provided'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testUnlikePostIdWrong()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-unlike-post", "-u 'test'", "-p 'test'", "-post-id '1'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'The post identifier to unlike was not valid'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testUnlikePostAlreadyLiked()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test2'", "-p 'test2'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-post", "-u 'test'", "-p 'test'","-text 'Imi beau cafeaua'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-unlike-post", "-u 'test2'", "-p 'test2'", "-post-id '1'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'The post identifier to unlike was not valid'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testUnlikePostSuccessfully()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test2'", "-p 'test2'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-post", "-u 'test'", "-p 'test'","-text 'Imi beau cafeaua'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-like-post", "-u 'test2'", "-p 'test2'", "-post-id '1'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-unlike-post", "-u 'test2'", "-p 'test2'", "-post-id '1'"});

        // assertion
        assertEquals("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    //endregion
    //region 8 Like unui comentariu

    @Test
    public void testLikeCommentNoUsername()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-like-comment"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testLikeCommentNoPassword()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-like-comment", "-u 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testLikeCommentUsernameDoesNotExists()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-like-comment", "-u 'test'", "-p 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testLikeCommentLoginCredentialsAreWrong()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-like-comment", "-u 'test'", "-p 'test2'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testLikeCommentNotFound()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-like-comment", "-u 'test'", "-p 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'No comment identifier to like was provided'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testLikeCommentIdWrong()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-like-comment", "-u 'test'", "-p 'test'", "-comment-id '1'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'The comment identifier to like was not valid'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testLikeCommentAlreadyLiked()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test2'", "-p 'test2'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-post", "-u 'test'", "-p 'test'","-text 'Astazi ma simt bine'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-comment-post", "-u 'test'", "-p 'test'", "-post-id '1'", "-text 'Foarte bine'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-like-comment", "-u 'test2'", "-p 'test2'", "-comment-id '1'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-like-comment", "-u 'test2'", "-p 'test2'", "-comment-id '1'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'The comment identifier to like was not valid'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testLikeCommentSuccessfully()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test2'", "-p 'test2'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-post", "-u 'test'", "-p 'test'","-text 'Astazi ma simt bine'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-comment-post", "-u 'test'", "-p 'test'", "-post-id '1'", "-text 'Imi pare rau'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-like-comment", "-u 'test2'", "-p 'test2'", "-comment-id '1'"});

        // assertion
        assertEquals("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    //endregion

    //region 9 Unlike unui comentariu
    @Test
    public void testUnlikeCommentNoUsername()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-unlike-comment"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testUnlikeCommentNoPassword()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-unlike-comment", "-u 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testUnlikeCommentUsernameDoesNotExists()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-unlike-comment", "-u 'test'", "-p 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testUnlikeCommentLoginCredentialsAreWrong()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-unlike-comment", "-u 'test'", "-p 'test2'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testUnlikeCommentNotFound()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-unlike-comment", "-u 'test'", "-p 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'No comment identifier to unlike was provided'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testUnlikeCommentIdWrong()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-unlike-comment", "-u 'test'", "-p 'test'", "-comment-id '1'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'The comment identifier to unlike was not valid'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testUnlikeCommentAlreadyLiked()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test2'", "-p 'test2'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-post", "-u 'test'", "-p 'test'","-text 'Astazi ma simt bine'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-comment-post", "-u 'test'", "-p 'test'", "-post-id '1'", "-text 'Imi pare rau'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-unlike-comment", "-u 'test2'", "-p 'test2'", "-comment-id '1'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'The comment identifier to unlike was not valid'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testUnlikeCommentSuccessfully()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test2'", "-p 'test2'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-post", "-u 'test'", "-p 'test'","-text 'Astazi ma simt bine'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-comment-post", "-u 'test'", "-p 'test'", "-post-id '1'", "-text 'Imi pare rau'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-like-comment", "-u 'test2'", "-p 'test2'", "-comment-id '1'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-unlike-comment", "-u 'test2'", "-p 'test2'", "-comment-id '1'"});

        // assertion
        assertEquals("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }


    //endregion

    //region 10 Lista postari a persoanelor urmarite, ordonate descrescator dupa data
    @Test
    public void testFollowingsNoUsername()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-followings-posts"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testFollowingsNoPassword()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-followings-posts", "-u 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testFollowingsUsernameDoesNotExists()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-followings-posts", "-u 'test'", "-p 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testFollowingsLoginCredentialsAreWrong()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-followings-posts", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-followings-posts", "-u 'test'", "-p 'test2'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }
    @Test
    public void testFollowingsSuccessfully()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));
        App.main(new String[]{"-create-user", "-u 'test1'", "-p 'test1'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));
        App.main(new String[]{"-create-user", "-u 'test2'", "-p 'test2'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));
        App.main(new String[]{"-create-user", "-u 'test3'", "-p 'test3'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));
        App.main(new String[]{"-create-user", "-u 'test4'", "-p 'test4'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));
        App.main(new String[]{"-create-post", "-u 'test2'", "-p 'test2'", "-text 'Astazi ma simt bine'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));
        App.main(new String[]{"-create-post", "-u 'test2'", "-p 'test2'", "-text 'Am terminat temele'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));
        App.main(new String[]{"-create-post", "-u 'test3'", "-p 'test3'", "-text 'Merg la pescuit'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));
        App.main(new String[]{"-create-post", "-u 'test4'", "-p 'test4'", "-text 'Ma plimb in parc'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));
        App.main(new String[]{"-follow-user-by-username", "-u 'test1'", "-p 'test1'", "-username 'test2'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));
        App.main(new String[]{"-follow-user-by-username", "-u 'test1'", "-p 'test1'", "-username 'test3'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));
        App.main(new String[]{"-follow-user-by-username", "-u 'test1'", "-p 'test1'", "-username 'test4'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-followings-posts", "-u 'test1'", "-p 'test1'"});

        DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        Date date = new Date();
        String currentDateAsString = dateFormat.format(date);

        // assertion
        assertEquals(("{ 'status' : 'ok', 'message' : [" +
                        "{'post_id' : '4', 'post_text' : 'Ma plimb in parc', 'post_date' : '" + currentDateAsString + "', 'username' : 'test4'}," +
                        "{'post_id' : '3', 'post_text' : 'Merg la pescuit', 'post_date' : '" + currentDateAsString + "', 'username' : 'test3'}," +
                        "{'post_id' : '2', 'post_text' : 'Am terminat temele', 'post_date' : '" + currentDateAsString + "', 'username' : 'test2'}," +
                        "{'post_id' : '1', 'post_text' : 'Astazi ma simt bine', 'post_date' : '" + currentDateAsString + "', 'username' : 'test2'}]}"
                )
                        .replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    //endregion

    //region 11 Lista postari per utilizator, ordonate descrescator dupa data
    @Test
    public void testUserPostsNoUsername()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-user-posts"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testUserPostsNoPassword()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-user-posts", "-u 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testUserPostsUsernameDoesNotExists()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-user-posts", "-u 'test'", "-p 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testUserPostsLoginCredentialsAreWrong()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-user-posts", "-u 'test'", "-p 'test2'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testUserPostsNotFound()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-user-posts", "-u 'test'", "-p 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'No username to list posts was provided'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testUserPostsIdWrong()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-user-posts", "-u 'test'", "-p 'test'", "-username 'test2'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'The username to list posts was not valid'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testUserPostsAlreadyUnfollowing()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test2'", "-p 'test2'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-user-posts", "-u 'test'", "-p 'test'", "-username 'test2'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'The username to list posts was not valid'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testUserPostsSuccessfully()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test2'", "-p 'test2'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-post", "-u 'test2'", "-p 'test2'", "-text 'Astazi ma simt bine'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-post", "-u 'test2'", "-p 'test2'", "-text 'Am terminat temele'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-post", "-u 'test2'", "-p 'test2'", "-text 'Merg la pescuit'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-post", "-u 'test2'", "-p 'test2'", "-text 'Ma plimb in parc'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));
        App.main(new String[]{"-follow-user-by-username", "-u 'test'", "-p 'test'", "-username 'test2'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));
        App.main(new String[]{"-get-user-posts", "-u 'test'", "-p 'test'", "-username 'test2'"});

        DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        Date date = new Date();
        String currentDateAsString = dateFormat.format(date);

        // assertion
        assertEquals(("{'status' : 'ok', 'message' :" + " [" +
                        "{'post_id' : '4', 'post_text' : 'Ma plimb in parc', 'post_date' : '" + currentDateAsString + "'}," +
                        "{'post_id' : '3', 'post_text' : 'Merg la pescuit', 'post_date' : '" + currentDateAsString + "'}," +
                        "{'post_id' : '2', 'post_text' : 'Am terminat temele', 'post_date' : '" + currentDateAsString + "'}," +
                        "{'post_id' : '1', 'post_text' : 'Astazi ma simt bine', 'post_date' : '" + currentDateAsString + "'}" +
                        "]}")
                        .replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    //endregion

    //region 12 Detalii postare (text, număr de like-uri, listă comentarii postare, ordonate descrescător după dată)

    @Test
    public void testPostDetailsNoUsername()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-post-details"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testPostDetailsNoPassword()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-post-details", "-u 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testPostDetailsUsernameDoesNotExists()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-post-details", "-u 'test'", "-p 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testPostDetailsLoginCredentialsAreWrong()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-post-details", "-u 'test'", "-p 'test2'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testPostDetailsIdNotFound()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-post-details", "-u 'test'", "-p 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'No post identifier was provided'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testPostDetailsIdWrong()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-post-details", "-u 'test'", "-p 'test'", "-post-id '1'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'The post identifier was not valid'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testPostDetailsIdWrongSecond()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-post", "-u 'test'", "-p 'test'", "-text 'Am terminat temele'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-post-details", "-u 'test'", "-p 'test'", "-post-id '2'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'The post identifier was not valid'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testPostDetailsSuccessfully()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test2'", "-p 'test2'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-post", "-u 'test'", "-p 'test'", "-text 'Am terminat temele'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-comment-post", "-u 'test2'", "-p 'test2'", "-post-id '1'", "-text 'Felicitari'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-get-post-details", "-u 'test'", "-p 'test'", "-post-id '1'"});

        DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        Date date = new Date();
        String currentDateAsString = dateFormat.format(date);

        // assertion
        assertEquals(("{'status' : 'ok', 'message' : [{'post_text' : 'Am terminat temele', 'post_date' :'" +
                        currentDateAsString + "', 'username' : 'test', 'number_of_likes' :" +
                        " '0', 'comments' : [{'comment_id' : '1' ," +
                        " 'comment_text' : 'Felicitari', 'comment_date' : '" + currentDateAsString + "', " +
                        "'username' : 'test2', 'number_of_likes' : '0'}] }] }")
                        .replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    //endregion

    //region 13 Comentează postare
    @Test
    public void testCommentPostNoUsername()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-comment-post"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testCommentPostNoPassword()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-comment-post", "-u 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testCommentPostUsernameDoesNotExists()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-comment-post", "-u 'test'", "-p 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testCommentPostLoginCredentialsAreWrong()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-comment-post", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-comment-post", "-u 'test'", "-p 'test2'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testCommentPostWithNoText()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-comment-post", "-u 'test'", "-p 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'No text provided'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testCommentPostWithOver300Characters()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-post", "-u 'test'", "-p 'test'", "-text 'Am terminat temele'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-comment-post", "-u 'test'", "-p 'test'",  "-post-id '1'", "-text 'Sunt interese mari la mijloc. Sunt interese mari la mijloc. Sunt interese mari la mijloc. Sunt interese mari la mijloc. Sunt interese mari la mijloc. Sunt interese mari la mijloc. Sunt interese mari la mijloc. Sunt interese mari la mijloc. Sunt interese mari la mijloc. Sunt interese mari la mijloc. Sunt interese mari la mijloc. Sunt interese mari la mijloc. Sunt interese mari la mijloc. Sunt interese mari la mijloc. Sunt interese mari la mijloc. Sunt interese mari la mijloc. Sunt interese mari la mijloc. Sunt interese mari la mijloc. Sunt interese mari la mijloc. Sunt interese mari la mijloc. '"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Comment text length exceeded'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testCommentPostSuccessfully()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-post", "-u 'test'", "-p 'test'", "-text 'Am terminat temele'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-comment-post", "-u 'test'", "-p 'test'",  "-post-id '1'", "-text 'Sunt interese mari la mijloc.'"});

        // assertion
        assertEquals("{ 'status' : 'ok', 'message' : 'Comment added successfully'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    //endregion

    //region 14 Șterge comentariu postare

    @Test
    public void testDeleteCommentNoUsername()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-delete-comment-by-id"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testDeleteCommentNoPassword()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-delete-comment-by-id", "-u 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testDeleteCommentUsernameDoesNotExists()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-delete-comment-by-id", "-u 'test'", "-p 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testDeleteCommentLoginCredentialsAreWrong()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-delete-comment-by-id", "-u 'test'", "-p 'test2'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testDeleteCommentNotFound()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-delete-comment-by-id", "-u 'test'", "-p 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'No identifier was provided'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testDeleteCommentWrong()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-delete-comment-by-id", "-u 'test'", "-p 'test'", "-id '1'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'The identifier was not valid'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testDeleteCommentNoPermissions()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));
        App.main(new String[]{"-create-user", "-u 'test2'", "-p 'test2'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));
        App.main(new String[]{"-create-post", "-u 'test'", "-p 'test'", "-text 'Am terminat temele'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));
        App.main(new String[]{"-comment-post", "-u 'test'", "-p 'test'",  "-post-id '1'", "-text 'Sunt interese mari la mijloc.'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));
        App.main(new String[]{"-delete-comment-by-id", "-u 'test2'", "-p 'test2'", "-id '1'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'The identifier was not valid'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }


    @Test
    public void testDeleteCommentSuccessfully()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test2'", "-p 'test2'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-post", "-u 'test'", "-p 'test'","-text 'Imi beau cafeaua'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-comment-post", "-u 'test2'", "-p 'test2'", "-post-id '1'", "-text 'Si eu astazi ma simt bine'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-delete-comment-by-id", "-u 'test2'", "-p 'test2'", "-id '1'"});

        // assertion
        assertEquals("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    //endregion

    //region 15	Listă Following per utilizator

    @Test
    public void testGetFollowingNoUsername()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-following"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testGetFollowingNoPassword()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-following", "-u 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testGetFollowingUsernameDoesNotExists()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-following", "-u 'test'", "-p 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testGetFollowingLoginCredentialsAreWrong()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-following", "-u 'test'", "-p 'test2'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testGetFollowingSuccessfully()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test2'", "-p 'test2'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test3'", "-p 'test3'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test4'", "-p 'test4'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-follow-user-by-username", "-u 'test'", "-p 'test'", "-username 'test2'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-follow-user-by-username", "-u 'test'", "-p 'test'", "-username 'test3'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-follow-user-by-username", "-u 'test'", "-p 'test'", "-username 'test4'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-get-following", "-u 'test'", "-p 'test'"});

        // assertion
        assertEquals("{ 'status' : 'ok', 'message' : [ 'test2', 'test3', 'test4' ]}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    //endregion

    //region 16 Lista Followers per utilizator

    @Test
    public void testGetFollowersNoUsername()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-followers"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testGetFollowersNoPassword()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-followers", "-u 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testGetFollowersUsernameDoesNotExists()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-followers", "-u 'test'", "-p 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testGetFollowersLoginCredentialsAreWrong()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-post", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-followers", "-u 'test'", "-p 'test2'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testGetFollowersNotFound()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-followers", "-u 'test'", "-p 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'No username to list followers was provided'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testGetFollowersWrong()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-followers", "-u 'test'", "-p 'test'", "-username 'test2'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'The username to list followers was not valid'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testGetFollowersSuccessfully()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test2'", "-p 'test2'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test3'", "-p 'test3'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test4'", "-p 'test4'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));


        App.main(new String[]{"-follow-user-by-username", "-u 'test2'", "-p 'test2'", "-username 'test'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-follow-user-by-username", "-u 'test3'", "-p 'test3'", "-username 'test'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-follow-user-by-username", "-u 'test4'", "-p 'test4'", "-username 'test'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-get-followers", "-u 'test'", "-p 'test'", "-username 'test'"});

        // assertion
        assertEquals("{ 'status' : 'ok', 'message' : [ 'test2', 'test3', 'test4' ]}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});

    }


    //endregion

    //region 17	Top 5 Most Liked posts în platformă

    @Test
    public void testGetMostLikedPostsNoUsername()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-most-liked-posts"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testGetMostLikedPostsNoPassword()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-most-liked-posts", "-u 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testGetMostLikedPostsUsernameDoesNotExists()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-most-liked-posts", "-u 'test'", "-p 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testGetMostLikedPostsLoginCredentialsAreWrong()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-post", "-u 'test'", "-p 'test'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-most-liked-posts", "-u 'test'", "-p 'test2'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testGetMostLikedPostsSuccessfully()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        //App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test2'", "-p 'test2'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test3'", "-p 'test3'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-post", "-u 'test'", "-p 'test'","-text 'Astazi ma simt bine'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-post", "-u 'test2'", "-p 'test2'","-text 'Am terminat temele'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-post", "-u 'test3'", "-p 'test3'","-text 'Merg la pescuit'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-like-post", "-u 'test2'", "-p 'test2'", "-post-id '1'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-like-post", "-u 'test3'", "-p 'test3'", "-post-id '1'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-like-post", "-u 'test3'", "-p 'test3'", "-post-id '2'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-get-most-liked-posts", "-u 'test'", "-p 'test'"});

        DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        Date date = new Date();
        String currentDateAsString = dateFormat.format(date);

        // assertion
        assertEquals(("{ 'status' : 'ok', 'message' : [{'post_id' : '1','post_text' : 'Astazi ma simt bine', 'post_date' : '"+ currentDateAsString + "', 'username' : 'test', 'number_of_likes' : '2' }," +
                        "{'post_id' : '2','post_text' : 'Am terminat temele', 'post_date' : '" + currentDateAsString + "', 'username' : 'test2', 'number_of_likes' : '1' }," +
                        "{'post_id' : '3','post_text' : 'Merg la pescuit', 'post_date' : '" + currentDateAsString + "', 'username' : 'test3', 'number_of_likes' : '0' } ]" +
                        "}").replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    //endregion

    //region 18 Top 5 Most Commented posts

    @Test
    public void testGetMostCommentedPostsNoUsername()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-most-commented-posts"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testGetMostCommentedPostsNoPassword()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-most-commented-posts", "-u 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testGetMostCommentedPostsUsernameDoesNotExists()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-most-commented-posts", "-u 'test'", "-p 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testGetMostCommentedPostsLoginCredentialsAreWrong()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-post", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-most-commented-posts", "-u 'test'", "-p 'test2'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }



    @Test
    public void testGetMostCommentedPostsSuccessfully()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        //App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test2'", "-p 'test2'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test3'", "-p 'test3'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-post", "-u 'test'", "-p 'test'","-text 'Astazi ma simt bine'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-post", "-u 'test2'", "-p 'test2'","-text 'Am terminat temele'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-post", "-u 'test3'", "-p 'test3'","-text 'Merg la pescuit'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));
        App.main(new String[]{"-comment-post", "-u 'test2'", "-p 'test2'", "-post-id '1'", "-text 'Foarte bine'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));
        App.main(new String[]{"-comment-post", "-u 'test3'", "-p 'test3'", "-post-id '1'", "-text 'Forza Steaua'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));
        App.main(new String[]{"-comment-post", "-u 'test'", "-p 'test'", "-post-id '2'", "-text 'Incredibil!'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-get-most-commented-posts","-u 'test'", "-p 'test'"});

        DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        Date date = new Date();
        String currentDateAsString = dateFormat.format(date);

        // assertion
        assertEquals(("{ 'status' : 'ok', 'message' : [{'post_id' : '1','post_text' : 'Astazi ma simt bine', 'post_date' : '" + currentDateAsString + "', 'username' : 'test', 'number_of_comments' : '2' }," +
                        "{'post_id' : '2','post_text' : 'Am terminat temele', 'post_date' : '" + currentDateAsString + "', 'username' : 'test2', 'number_of_comments' : '1' }," +
                        "{'post_id' : '3','post_text' : 'Merg la pescuit', 'post_date' : '" + currentDateAsString + "', 'username' : 'test3', 'number_of_comments' : '0' }" +
                        "]}").replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    //endregion

    //region 19	Top 5 Most Followed users

    @Test
    public void testGetMostFollowedPostsNoUsername()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-most-followed-users"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testGetMostFollowedPostsNoPassword()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-most-followed-users", "-u 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testGetMostFollowedPostsUsernameDoesNotExists()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-most-followed-users", "-u 'test'", "-p 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testGetMostFollowedPostsLoginCredentialsAreWrong()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-most-followed-users", "-u 'test'", "-p 'test2'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testGetMostFollowedPostsSuccessfully()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        //App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test2'", "-p 'test2'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test3'", "-p 'test3'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test4'", "-p 'test4'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test5'", "-p 'test5'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test6'", "-p 'test6'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test7'", "-p 'test7'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test8'", "-p 'test8'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test9'", "-p 'test9'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test10'", "-p 'test10'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test11'", "-p 'test11'"});

        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-follow-user-by-username", "-u 'test10'", "-p 'test10'", "-username 'test'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-follow-user-by-username", "-u 'test9'", "-p 'test9'", "-username 'test'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-follow-user-by-username", "-u 'test8'", "-p 'test8'", "-username 'test'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-follow-user-by-username", "-u 'test7'", "-p 'test7'", "-username 'test'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-follow-user-by-username", "-u 'test6'", "-p 'test6'", "-username 'test2'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-follow-user-by-username", "-u 'test5'", "-p 'test5'", "-username 'test2'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-follow-user-by-username", "-u 'test4'", "-p 'test4'", "-username 'test2'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-follow-user-by-username", "-u 'test3'", "-p 'test3'", "-username 'test4'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-follow-user-by-username", "-u 'test2'", "-p 'test2'", "-username 'test4'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-follow-user-by-username", "-u 'test'", "-p 'test'", "-username 'test5'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-follow-user-by-username", "-u 'test11'", "-p 'test11'", "-username 'test6'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-get-most-followed-users","-u 'test'", "-p 'test'"});

        // assertion
        assertEquals(("{ 'status' : 'ok', 'message' : [{'username' : 'test','number_of_followers' : ' 4' }," +
                        "{'username' : 'test2','number_of_followers' : ' 3' }," +
                        "{'username' : 'test4','number_of_followers' : ' 2' }," +
                        "{'username' : 'test5','number_of_followers' : ' 1' }," +
                        "{'username' : 'test6','number_of_followers' : ' 1' }" +
                        " ]}").replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    //endregion

    //region 20	Top 5 Most Liked users în platformă (suma like-uri postări + comentarii)

    @Test
    public void testGetMostLikedUsersNoUsername()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-most-liked-users"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testGetMostLikedUsersNoPassword()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-most-liked-users", "-u 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testGetMostLikedUsersUsernameDoesNotExists()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-most-liked-users", "-u 'test'", "-p 'test'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testGetMostLikedUsersLoginCredentialsAreWrong()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-post", "-u 'test'", "-p 'test'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-get-most-liked-users", "-u 'test'", "-p 'test2'"});

        // assertion
        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }

    @Test
    public void testGetMostLikedUsersSuccessfully()
    {
        PrintStream originalOut = System.out;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        //App.main(new String[]{"-cleanup-all"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        // action
        App.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test2'", "-p 'test2'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test3'", "-p 'test3'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test4'", "-p 'test4'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test5'", "-p 'test5'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-user", "-u 'test6'", "-p 'test6'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-post", "-u 'test'", "-p 'test'","-text 'Astazi ma simt bine'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-post", "-u 'test2'", "-p 'test2'","-text 'Am terminat temele'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-post", "-u 'test3'", "-p 'test3'","-text 'Merg la pescuit'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-post", "-u 'test4'", "-p 'test4'","-text 'Ma plimb in parc'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-post", "-u 'test5'", "-p 'test5'","-text 'Imi beau cafeaua'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-create-post", "-u 'test6'", "-p 'test6'","-text 'Cerul este insorit'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-comment-post", "-u 'test'", "-p 'test'", "-post-id '1'",  "-text 'Foarte bine'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-comment-post", "-u 'test2'", "-p 'test2'", "-post-id '1'", "-text 'Incredibil!'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-like-post", "-u 'test2'", "-p 'test2'", "-post-id '1'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-like-post", "-u 'test6'", "-p 'test6'", "-post-id '2'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-like-post", "-u 'test2'", "-p 'test2'", "-post-id '3'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-like-post", "-u 'test3'", "-p 'test3'", "-post-id '1'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-like-post", "-u 'test4'", "-p 'test4'", "-post-id '2'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-like-comment", "-u 'test5'", "-p 'test5'", "-comment-id '2'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-like-post", "-u 'test5'", "-p 'test5'", "-post-id '4'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-like-post", "-u 'test5'", "-p 'test5'", "-post-id '6'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-like-post", "-u 'test4'", "-p 'test4'", "-post-id '6'"});
        bos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(bos));

        App.main(new String[]{"-get-most-liked-users",  "-u 'test'", "-p 'test'"});

        // assertion
        assertEquals(("{ 'status' : 'ok', 'message' : " +
                        "[{'username' : 'test2','number_of_likes' : '3' }," +
                        "{'username' : 'test','number_of_likes' : '2'}," +
                        "{'username' : 'test6','number_of_likes' : '2'}," +
                        "{'username' : 'test3','number_of_likes' : '1'}," +
                        "{'username' : 'test4','number_of_likes' : '1'}]}").replace("' ", "'").replace(" '","'"),
                bos.toString().trim().replace("' ", "'").replace(" '","'"));

        // undo the binding in System
        System.setOut(originalOut);

        // action
        App.main(new String[]{"-cleanup-all"});
    }
    //endregion
}